name: CI

on:
  push:
    branches: [ main ]
    tags-ignore: [ '**' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Check format
      if: matrix.os == 'ubuntu-latest'
      run: cargo fmt --all --check

    - name: Check lint
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo clippy --fix
        git diff --exit-code --quiet

    - name: Run tests
      env:
        RUSTFLAGS: '-C instrument-coverage'
      run: cargo test --verbose

    - name: Generate coverage report (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      env:
        RUSTFLAGS: '-C instrument-coverage'
      run: |
        rustup component add llvm-tools-preview

        $TARGET_HOST = $(rustup show active-toolchain) -replace '[^-]*-(?<host>.*)\s.*', '${host}'
        $TEST_BIN = $(cargo test --no-run 2>&1 | grep Executable | cut -d '(' -f 2 | cut -d ')' -f 1)

        $(rustc --print sysroot)/lib/rustlib/${TARGET_HOST}/bin/llvm-profdata merge \
            -sparse default_*.profraw \
            -o default.profdata

        $(rustc --print sysroot)/lib/rustlib/${TARGET_HOST}/bin/llvm-cov report \
            --ignore-filename-regex='library/std/src' \
            --ignore-filename-regex='cargo/registry/src' \
            --object=${TEST_BIN} \
            --instr-profile=default.profdata \
            > Summary.txt

        cat Summary.txt

    - name: Generate coverage report (Windows)
      if: matrix.os == 'windows-latest'
      env:
        RUSTFLAGS: '-C instrument-coverage'
      run: |
        rustup component add llvm-tools-preview

        $TARGET_HOST = $(rustup show active-toolchain) -replace '[^-]*-(?<host>.*)\s.*', '${host}'
        $TEST_BIN = ($(cargo test --no-run 2>&1) |? { "$_" -like '*Executable*' }) -replace '.*\((?<path>.*)\).*', '${path}'

        & "$(rustc --print sysroot)\lib\rustlib\${TARGET_HOST}\bin\llvm-profdata.exe" merge `
            -sparse default_*.profraw `
            -o default.profdata

        & "$(rustc --print sysroot)\lib\rustlib\${TARGET_HOST}\bin\llvm-cov.exe" report `
            --ignore-filename-regex='library\\std\\src' `
            --ignore-filename-regex='cargo\\registry\\src' `
            --object=${TEST_BIN} `
            --instr-profile=default.profdata `
            > Summary.txt

        Get-Content .\Summary.txt

    - name: Create Artifacts
      run: cargo build --release --examples --verbose

    - name: Create Archive (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        RUST_TARGET=`rustup show active-toolchain | sed -e 's/[^-]*-\(.*\)\s.*/\1/'`
        tar -C ./target/release/examples/ -zcf tftp-${RUST_TARGET}.tar.gz tftp tftpd
        echo "RUST_TARGET=${RUST_TARGET}" >> $GITHUB_ENV
        echo "ARTIFACT_PATH=tftp-${RUST_TARGET}.tar.gz" >> $GITHUB_ENV

    - name: Create Archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $RUST_TARGET = $(rustup show active-toolchain) -replace '[^-]*-(?<host>.*)\s.*', '${host}'
        Compress-Archive -Path 'target\release\examples\tftp.exe', 'target\release\examples\tftpd.exe' -DestinationPath "tftp-${RUST_TARGET}.zip"
        Write-Output "RUST_TARGET=$RUST_TARGET" >> $env:GITHUB_ENV
        Write-Output "ARTIFACT_PATH=tftp-${RUST_TARGET}.zip" >> $env:GITHUB_ENV

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.RUST_TARGET }}
        path: ${{ env.ARTIFACT_PATH }}
        retention-days: 1
